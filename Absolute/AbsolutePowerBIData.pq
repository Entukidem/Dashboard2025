// This is the PowerQuery that executes python code to get Absolute device data on device Antivirus and encryption status. 
let
    Source = Python.Execute("import time#(lf)import requests#(lf)import pandas as pd#(lf)import json#(lf)from authlib.jose import JsonWebSignature#(lf)from types import SimpleNamespace#(lf)#(lf)#(lf)# Fill in the token ID for your API token#(lf)token_id = "&Text.From(AbsoluteTID)&"#(lf)# Fill in the secret key for your API token#(lf)token_secret = "&Text.From(AbsoluteTSecret) &"#(lf)#(lf)#(lf)### Code snippet from ""Update the request example"" defining the ""request"" variable goes here ...#(lf)request = {#(lf)    ""method"": ""GET"",#(lf)    ""contentType"": ""application/json"",#(lf)    ""uri"": ""/v3/reporting/devices"",#(lf)    # The queryString is URL encoded#(lf)    # Agent status A = Active, This example fetches only active devices because that lines up with the report in the console#(lf)    ""queryString"": ""agentStatus=A&pageSize=500"",#(lf)    # For GET requests, the payload is empty#(lf)    ""payload"": {}#(lf)}#(lf)#(lf)request_payload_data = {#(lf)    ""data"": request[""payload""]#(lf)}#(lf)headers = {#(lf)    ""alg"": ""HS256"",#(lf)    ""kid"": token_id,#(lf)    ""method"": request[""method""],#(lf)    ""content-type"": request[""contentType""],#(lf)    ""uri"": request[""uri""],#(lf)    ""query-string"": request[""queryString""],#(lf)    ""issuedAt"": round(time.time() * 1000)#(lf)}#(lf)#(lf)#(lf)jws = JsonWebSignature()#(lf)signed = jws.serialize_compact(headers, json.dumps(request_payload_data), token_secret)#(lf)#(lf)#(lf)# Make the actual request#(lf)# Update the request_url, if required:#(lf)# If you log in to https://cc.absolute.com,#(lf)# use https://api.absolute.com/jws/validate.#(lf)# If you log in to https://cc.us.absolute.com,#(lf)# use https://api.us.absolute.com/jws/validate.#(lf)# If you log in to https://cc.eu2.absolute.com,#(lf)# use https://api.eu2.absolute.com/jws/validate.#(lf)# If you log in to https://cc.fr1.absolutegov.com, #(lf)# use https://api.fr1.absolutegov.com/jws/validate.#(lf)request_url = ""https://api.absolute.com/jws/validate""#(lf)r = requests.post(request_url, signed, {""content-type"": ""text/plain""})#(lf)#(lf)#(lf)response_json = r.json()#(lf)#(lf)df = pd.DataFrame(columns=[""deviceUid"", ""encryptionStatus"", ""OS name"", ""OS Version"", ""OS UBR"", ""antivirusName"", ""antivirusVersion"", ""antivirusDefinition""])#(lf)#(lf)for item in response_json[""data""]:#(lf)    df = pd.concat([df, pd.DataFrame({#(lf)        ""deviceUid"": item.get(""deviceUid"", ""No Data""),#(lf)        ""encryptionStatus"": item.get(""espInfo"", {}).get(""encryptionStatus"", ""No Data""),#(lf)        ""OS name"": item.get(""operatingSystem"", {}).get(""name"", ""No Data""),#(lf)        ""OS Version"": item.get(""operatingSystem"", {}).get(""version"", ""No Data""),#(lf)        ""OS UBR"": item.get(""operatingSystem"", {}).get(""ubr"", """"),#(lf)        ""antivirusName"": item.get(""avpInfo"", {}).get(""antivirusName"", ""No Data""),#(lf)        ""antivirusVersion"": item.get(""avpInfo"", {}).get(""antivirusVersion"", ""No Data""),#(lf)        ""antivirusDefinition"": item.get(""avpInfo"", {}).get(""antivirusDefinition"", ""No Data""),#(lf)    }, index=[0])], ignore_index=True)#(lf)#(lf)next_page = response_json.get(""metadata"", {}).get(""pagination"", {}).get(""nextPage"")#(lf)#(lf)#(lf)# Handle pagination (Continue to fetch pages while nextPage token is present)#(lf)while next_page:#(lf)    # Update queryString for next page#(lf)    request[""queryString""] = ""agentStatus=A&pageSize=500&nextPage="" + next_page#(lf)    headers[""query-string""] = ""agentStatus=A&pageSize=500&nextPage="" + next_page#(lf)    headers[""issuedAt""] = round(time.time() * 1000)  # Update timestamp#(lf)#(lf)    # Re-sign the request with updated headers#(lf)    signed = jws.serialize_compact(headers, json.dumps(request_payload_data), token_secret)#(lf)#(lf)    r = requests.post(request_url, signed, {""content-type"": ""text/plain""})#(lf)    response_json = r.json()#(lf)#(lf)    # Process data...#(lf)    for item in response_json[""data""]:#(lf)        df = pd.concat([df, pd.DataFrame({#(lf)            ""deviceUid"": item.get(""deviceUid"", ""No Data""),#(lf)            ""encryptionStatus"": item.get(""espInfo"", {}).get(""encryptionStatus"", ""No Data""),#(lf)            ""OS name"": item.get(""operatingSystem"", {}).get(""name"", ""No Data""),#(lf)            ""OS Version"": item.get(""operatingSystem"", {}).get(""version"", ""No Data""),#(lf)            ""OS UBR"": item.get(""operatingSystem"", {}).get(""ubr"", """"),#(lf)            ""antivirusName"": item.get(""avpInfo"", {}).get(""antivirusName"", ""No Data""),#(lf)            ""antivirusVersion"": item.get(""avpInfo"", {}).get(""antivirusVersion"", ""No Data""),#(lf)            ""antivirusDefinition"": item.get(""avpInfo"", {}).get(""antivirusDefinition"", ""No Data""),#(lf)        }, index=[0])], ignore_index=True)#(lf)#(lf)        #(lf)    next_page = response_json.get(""metadata"", {}).get(""pagination"", {}).get(""nextPage"")#(lf)#(lf)# Editing dataframe value names#(lf)# Names based on Absolute documentation https://api.absolute.com/api-doc/doc.html#tag/Device-Reporting/operation/get-devices#(lf)# Along with the way they are shown in the Absolute console#(lf)df['encryptionStatus'] = df['encryptionStatus'].replace({#(lf)    'USENCR': 'Used Space Encrypted',#(lf)    'ENCR': 'Encrypted',#(lf)    'SUSP': 'Suspended',#(lf)    'NO DATA': 'No Data',#(lf)    'INPR': 'Encryption In Progress',#(lf)    'INST': 'Not Encrypted',#(lf)    'DECRINPR': '(Windows only): the system drive is in the process of being decrypted by BitLocker Drive Encryption',#(lf)    'UNKN': 'Encryption product not detected',#(lf)})#(lf)#(lf)#(lf)#(lf)#(lf)#(lf)"),
    df1 = Source{[Name="df"]}[Value],
    #"Changed Type" = Table.TransformColumnTypes(df1,{{"deviceUid", type text}, {"encryptionStatus", type text}, {"OS name", type text}, {"OS Version", type text}, {"OS UBR", Int64.Type}, {"antivirusName", type text}, {"antivirusVersion", type text}, {"antivirusDefinition", type text}})
in
    #"Changed Type"
